apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "clusterjellyfin.fullname" . }}-main
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "clusterjellyfin.labels" . | nindent 4 }}
    component: main
spec:
  replicas: {{ .Values.jellyfin.replicas }}
  selector:
    matchLabels:
      {{- include "clusterjellyfin.selectorLabels" . | nindent 6 }}
      component: main
  template:
    metadata:
      labels:
        {{- include "clusterjellyfin.selectorLabels" . | nindent 8 }}
        component: main
    spec:
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      initContainers:
      - name: create-jellyfin-user
        image: debian:trixie-slim
        command:
        - /bin/bash
        - -c
        - |
          # Create jellyfin user in shared passwd file
          echo "jellyfin:x:{{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }}:Jellyfin User:/home/jellyfin:/bin/bash" > /shared-etc/passwd
          echo "jellyfin:x:{{ .Values.securityContext.runAsGroup }}:" > /shared-etc/group
        volumeMounts:
        - name: shared-etc
          mountPath: /shared-etc
      - name: install-rffmpeg
        image: python:3.11-slim
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -e
          apt update && apt install -y wget openssh-client
          
          # Create jellyfin user for SSH
          useradd -u {{ .Values.securityContext.runAsUser }} -g {{ .Values.securityContext.runAsGroup }} -m -s /bin/bash jellyfin || true
          
          # Download rffmpeg content and embed it in wrapper script
          wget -O /tmp/rffmpeg-real https://raw.githubusercontent.com/joshuaboniface/rffmpeg/master/rffmpeg
          cat > /shared/rffmpeg << 'SCRIPT_END'
          #!/bin/bash
          
          # Local ffmpeg for validation
          LOCAL_FFMPEG="/usr/lib/jellyfin-ffmpeg/ffmpeg"
          
          # Use service name for load balancing across workers
          WORKER_SERVICE="{{ include "clusterjellyfin.fullname" $ }}-workers"
          SSH_USER="jellyfin"
          
          # Check for validation flags
          case "${1:-}" in
              ""|"-version"|"-f"|"-formats"|"-codecs"|"-decoders"|"-encoders"|"-bsfs"|"-protocols"|"-filters"|"-pix_fmts"|"-layouts"|"-sample_fmts"|"-buildconf")
                  exec $LOCAL_FFMPEG "$@"
                  ;;
              *)
                  # Check if this is a ffprobe operation (metadata probing)
                  if [[ "$*" == *"-print_format"* ]] || [[ "$*" == *"-show_streams"* ]] || [[ "$*" == *"-show_chapters"* ]] || [[ "$*" == *"-show_format"* ]]; then
                      # Convert deprecated -print_format to -output_format and use ffprobe on worker
                      args=$(printf '%q ' "$@")
                      args="${args//-print_format/-output_format}"
                      ssh -o StrictHostKeyChecking=no -i /home/jellyfin/.ssh/id_rsa $SSH_USER@$WORKER_SERVICE "/usr/lib/jellyfin-ffmpeg/ffprobe $args"
                  else
                      # This is ffmpeg transcoding - use ffmpeg on worker
                      args=$(printf '%q ' "$@")
                      # Add VAAPI device initialization if missing and using VAAPI
                      if [[ "$args" == *"vaapi"* ]] && [[ "$args" != *"-init_hw_device"* ]]; then
                        args="-init_hw_device vaapi=va:/dev/dri/renderD128 $args"
                      fi
                      ssh -o StrictHostKeyChecking=no -i /home/jellyfin/.ssh/id_rsa $SSH_USER@$WORKER_SERVICE "/usr/lib/jellyfin-ffmpeg/ffmpeg $args"
                  fi
                  ;;
          esac
          SCRIPT_END
          chmod +x /shared/rffmpeg
          echo "Init container completed successfully"
        volumeMounts:
        - name: shared-rffmpeg
          mountPath: /shared
      containers:
      - name: jellyfin
        image: "{{ .Values.image.jellyfin.repository }}:{{ .Values.image.jellyfin.tag }}"
        imagePullPolicy: {{ .Values.image.jellyfin.pullPolicy }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
        env:
        - name: JELLYFIN_PublishedServerUrl
          value: "{{ .Values.jellyfin.publishedServerUrl }}"
        - name: JELLYFIN_FFMPEG
          value: "/usr/local/bin/rffmpeg"
        {{- if .Values.jellyfin.extraEnv }}
        {{- toYaml .Values.jellyfin.extraEnv | nindent 8 }}
        {{- end }}
        ports:
        - containerPort: 8096
        - containerPort: 8920
        - containerPort: 1900
          protocol: UDP
        - containerPort: 7359
          protocol: UDP
        volumeMounts:
        - name: jellyfin-config
          mountPath: /config
        - name: jellyfin-cache
          mountPath: /cache
        - name: jellyfin-media
          mountPath: /media
        - name: shared-rffmpeg
          mountPath: /shared
        - name: rffmpeg-config
          mountPath: /config/rffmpeg.yml
          subPath: rffmpeg.yml
        - name: shared-rffmpeg
          mountPath: /usr/local/bin/rffmpeg
          subPath: rffmpeg
        - name: main-ssh-keys
          mountPath: /home/jellyfin/.ssh
          readOnly: true
        - name: shared-etc
          mountPath: /etc/passwd
          subPath: passwd
        - name: shared-etc
          mountPath: /etc/group
          subPath: group
        - name: trickplay
          mountPath: /tmp/jellyfin
        resources:
          {{- toYaml .Values.jellyfin.resources | nindent 10 }}
      volumes:
      - name: jellyfin-config
        persistentVolumeClaim:
          claimName: {{ include "clusterjellyfin.fullname" . }}-config
      - name: jellyfin-cache
        persistentVolumeClaim:
          claimName: {{ include "clusterjellyfin.fullname" . }}-cache
      - name: jellyfin-media
        persistentVolumeClaim:
          claimName: {{ include "clusterjellyfin.fullname" . }}-media
      - name: shared-rffmpeg
        emptyDir: {}
      - name: trickplay
        persistentVolumeClaim:
          claimName: {{ include "clusterjellyfin.fullname" . }}-trickplay
      - name: main-ssh-keys
        secret:
          secretName: {{ include "clusterjellyfin.fullname" . }}-main-ssh
          defaultMode: 0600
      - name: shared-etc
        emptyDir: {}
      - name: rffmpeg-config
        configMap:
          name: {{ include "clusterjellyfin.fullname" . }}-rffmpeg-config
